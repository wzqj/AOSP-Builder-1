env:
    CIRRUS_CLONE_DEPTH: 1
    CIRRUS_LOG_TIMESTAMP: true
    MANIFEST: https://github.com/LineageOS/android.git -b lineage-18.1
    DEVICE: bacon
    OEM: oneplus
    LOCAL_MANIFEST: https://github.com/wzqj/local_manifests
    DT_LINK: https://github.com/LineageOS/android_device_oneplus_bacon
    DT_PATH: device/$OEM/$DEVICE
    VT_LINK: https://github.com/TheMuppets/proprietary_vendor_oneplus
    VT_PATH: vendor/$OEM/$DEVICE
    KT_LINK: https://github.com/LineageOS/android_kernel_oppo_msm8974
    PLATFORM: msm8974
    KT_PATH: kernel/oppo/$PLATFORM
    TARGET: bacon
    EXTRA_CMD: export SKIP_ABI_CHECKS=true
    LUNCH_COMBO: lineage_$DEVICE-userdebug
    OUTPUT: lineage*.zip
    USE_CCACHE: 1
    CCACHE_EXEC: /usr/bin/ccache
    CCACHE_DIR: $CIRRUS_WORKING_DIR/ccache
    CCACHE_URL_DIR: $CIRRUS_WORKING_DIR/ccache_url
    CCACHE_URL_FILE: $CCACHE_URL_DIR/ccache_url.txt

task:
  name: "build_ccache"
  timeout_in: 120m
  container:
      image: ubuntu:20.04
      cpu: 8
      memory: 32G
  ccache_cache: 
    folders:
      - ccache_url
    fingerprint_key: bacon_lineage18.1
    reupload_on_changes: true
    populate_script: 
      - mkdir -p $CCACHE_DIR
      - mkdir -p $CCACHE_URL_DIR
        
  env_script:
       - echo "============================"
       - echo "Set up environment"
       - echo "============================"
       - export DEBIAN_FRONTEND=noninteractive
       - apt update
       - apt install sudo
       - DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends tzdata
       - ln -sf /usr/share/zoneinfo/Canada/Pacific /etc/localtime
       - apt-get install -y tzdata
       - dpkg-reconfigure --frontend noninteractive tzdata
       - sudo apt update -y && sudo apt install git aria2 curl wget rsync zip unzip lzma cpio ccache clang axel tar pigz fontconfig ttf-dejavu -y
       - sudo apt install python3 -y
       - sudo ln -sf /usr/bin/python3 /usr/bin/python
       - git config --global user.name "wzqj"
       - git config --global user.email "9105604+wzqj@users.noreply.github.com"
       - git clone --depth=1 https://github.com/akhilnarang/scripts.git ~/scripts
       - cd ~/scripts
       - sudo bash setup/android_build_env.sh
       - cd ~
  
  check_space_script:
      - env
      - pwd
      - df -h
      - lsblk
      - ls -l -a -h
      - mount
  
  download_ccache_background_script:
    #- echo "https://transfer.sh/LqxuFr/ccache.tar.gz" > $CCACHE_URL_FILE
      - if [ -f $CCACHE_URL_FILE ]; then cat $CCACHE_URL_FILE; fi
      - sleep 5m
      - mkdir -p $CCACHE_DIR
      - if [ -f $CCACHE_URL_FILE ]; then aria2c -s16 -x16 $(cat $CCACHE_URL_FILE); tar xf ccache.tar.gz --directory $CIRRUS_WORKING_DIR; rm ccache.tar.gz; fi

  sync_script:
      - echo "============================"
      - echo "Syncing The Sources..."
      - echo "============================"
      - mkdir -p $CIRRUS_WORKING_DIR/work
      - cd $CIRRUS_WORKING_DIR/work
      - repo init --depth=1 --no-repo-verify -u $MANIFEST -g default,-mips,-darwin,-notdefault
      - git clone $LOCAL_MANIFEST --depth=1 -b main .repo/local_manifests
      - pwd
      - repo sync -c -j16 --force-sync --no-tags --no-clone-bundle --optimized-fetch --prune || repo sync -c -j8 --force-sync --no-tags --no-clone-bundle --optimized-fetch --prune
      - echo "============================"
      - echo "Syncing Complete!"
      - echo "============================"
      - ls -lah

  check_space_after_sync_script:
      - pwd
      - df -h
      - lsblk
      - ls -l -a -h

  upload_ccache_background_script:
      - sleep 80m #waits for ~15m docs build times, then the rest
      - cd $CIRRUS_WORKING_DIR
      - sync
      - tar --use-compress-program="pigz -k -1" -cf ccache.tar.gz ccache/ || [[ $? -eq 1 ]]
      - cd ccache_url/
      - wget --method PUT --body-file=$CIRRUS_WORKING_DIR/ccache.tar.gz https://transfer.sh/ccache.tar.gz -O - -nv > ccache_url.txt || wget --method PUT --body-file=$CIRRUS_WORKING_DIR/ccache.tar.gz https://transfer.sh/ccache.tar.gz -O - -nv > ccache_url.txt
      - ls -lah
      - cat ccache_url.txt
        #- curl --upload-file $CIRRUS_WORKING_DIR/ccache.tar.gz https://transfer.sh | tee ccache_url.txt

  build_ccache_script:
      - echo "============================"
      - echo "Starting the Build..."
      - echo "============================"
      - cd $CIRRUS_WORKING_DIR/work
      - $EXTRA_CMD
      - ccache -o compression=true
      - ccache -M 50G
      - . build/envsetup.sh
      - lunch "$LUNCH_COMBO"
      - make -j16 api-stubs-docs || echo no problem
      - make -j16 hiddenapi-lists-docs || echo no problem
      - make -j16 system-api-stubs-docs || echo no problem
      - make -j16 test-api-stubs-docs || echo no problem
      - mka -j16 $TARGET &
      - sleep 80m # leave enough time for upload_ccache to complete upload, otherwise ccache_url will be empty
      - kill %1
      - ccache -s
        #- mmm -j16 frameworks/base/core frameworks/base/data frameworks/base/api frameworks/base/libs

  always:
    upload_caches:
      - ccache

  check_space_after_ccache_build_script:
      - pwd
      - df -h
      - lsblk
      - ls -l -a -h
      - ccache -s
      
  Upload_script:
      - cat $CCACHE_URL_FILE
        #      - if [ -d $CIRRUS_WORKING_DIR/work/out/target/product/"$DEVICE" ]
      - then
      - echo "============================"
      - echo "Uploading the Build..."
      - echo "============================"
        #- tar -cf out.tar $CIRRUS_WORKING_DIR/work/out/target/product/"$DEVICE"
      - pwd
      - ls -lah
      - ls -lh $CIRRUS_WORKING_DIR/work/out/target/product/"$DEVICE"
      - cd $CIRRUS_WORKING_DIR/work/out/target/product/"$DEVICE"
      - du --max-depth=1 -h $CIRRUS_WORKING_DIR/work/out/target/product/"$DEVICE"
      - chmod 777 *
        #- curl --upload-file out.tar https://transfer.sh | tee link.txt && echo " "
      - for file in *;
      - do wget --method PUT --body-file=$file https://transfer.sh/$file -O - -nv | tee link.txt & 
      - done
      - wait -f
      - echo " "
      - echo "============================"
      - echo "Build Uploaded!"
      - echo "Please see the link Below-  "
      - echo "----------------------------"
      - cat link.txt && echo " "
      - echo "============================"
      - fi
     

task:
  depends_on: build_ccache
  name: build_rom
  timeout_in: 120m
  container:
      image: ubuntu:20.04
      cpu: 8
      memory: 32G
  ccache_cache: 
    folders:
      - ccache_url
    fingerprint_key: bacon_lineage18.1
    reupload_on_changes: true
    populate_script:
      - mkdir -p $CCACHE_DIR
      - mkdir -p $CCACHE_URL_DIR
        
  Build-Env-Setup_script:
       - echo "============================"
       - echo "Set up environment"
       - echo "============================"
       - export DEBIAN_FRONTEND=noninteractive
       - env
       - apt update
       - apt install sudo
       - DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends tzdata
       - ln -sf /usr/share/zoneinfo/Canada/Pacific /etc/localtime
       - apt-get install -y tzdata
       - dpkg-reconfigure --frontend noninteractive tzdata
       - sudo apt update -y && sudo apt install git aria2 curl wget rsync zip unzip lzma cpio ccache clang axel tar pigz fontconfig ttf-dejavu -y
       - sudo apt install python3 -y
       - sudo ln -sf /usr/bin/python3 /usr/bin/python
       - git config --global user.name "wzqj"
       - git config --global user.email "9105604+wzqj@users.noreply.github.com"
       - git clone --depth=1 https://github.com/akhilnarang/scripts.git ~/scripts
       - cd ~/scripts
       - sudo bash setup/android_build_env.sh
       - cd ~
  
  Storage-Checker_script:
      - pwd
      - df -h
      - lsblk
      - ls -l -a -h
      - mount
  
  download_ccache_background_script:
      - if [ -f $CCACHE_URL_FILE ]; then cat $CCACHE_URL_FILE; fi
      - sleep 5m
      - mkdir -p $CCACHE_DIR
      - if [ -f $CCACHE_URL_FILE ]; then aria2c -s16 -x16 $(cat $CCACHE_URL_FILE); tar xf ccache.tar.gz --directory $CIRRUS_WORKING_DIR; rm ccache.tar.gz; fi

  Sync_script:
      - echo "============================"
      - echo "Syncing The Sources..."
      - echo "============================"
      - mkdir -p $CIRRUS_WORKING_DIR/work
      - cd $CIRRUS_WORKING_DIR/work
      - repo init --depth=1 --no-repo-verify -u $MANIFEST -g default,-mips,-darwin,-notdefault
      - git clone $LOCAL_MANIFEST --depth=1 -b main .repo/local_manifests
      - pwd
      - repo sync -c -j16 --force-sync --no-tags --no-clone-bundle --optimized-fetch --prune || repo sync -c -j8 --force-sync --no-tags --no-clone-bundle --optimized-fetch --prune
      - echo "============================"
      - echo "Syncing Complete!"
      - echo "============================"
      - ls -lah

  upload_ccache_background_script:
      - sleep 80m #waits for ~15m docs build times, then the rest
      - cd $CIRRUS_WORKING_DIR
      - sync
      - sleep 10
      - tar --use-compress-program="pigz -k -1" -cf ccache.tar.gz ccache/ || [[ $? -eq 1 ]]
      - cd ccache_url/
      - wget --method PUT --body-file=$CIRRUS_WORKING_DIR/ccache.tar.gz https://transfer.sh/ccache.tar.gz -O - -nv > ccache_url.txt || wget --method PUT --body-file=$CIRRUS_WORKING_DIR/ccache.tar.gz https://transfer.sh/ccache.tar.gz -O - -nv > ccache_url.txt
        #- curl --upload-file $CIRRUS_WORKING_DIR/ccache.tar.gz https://transfer.sh | tee ccache_url.txt
      - cat ccache_url.txt
     
  Build_script:
      - echo "============================"
      - echo "Starting the Build..."
      - echo "============================"
      - cd $CIRRUS_WORKING_DIR/work
      - $EXTRA_CMD
      - ccache -o compression=true
      - ccache -M 50G
      - . build/envsetup.sh
      - lunch "$LUNCH_COMBO"
      - make -j16 api-stubs-docs || echo no problem
      - make -j16 hiddenapi-lists-docs || echo no problem
      - make -j16 system-api-stubs-docs || echo no problem
      - make -j16 test-api-stubs-docs || echo no problem
      - mka -j16 $TARGET &
      - sleep 75m
      - kill %1
      - ccache -s

  always:
    upload_caches:
      - ccache

  Upload_script:
      - cat $CCACHE_URL_FILE
      - if [ -d $CIRRUS_WORKING_DIR/work/out/target/product/"$DEVICE" ]
      - then
      - echo "============================"
      - echo "Uploading the Build..."
      - echo "============================"
      - tar -cf out.tar $CIRRUS_WORKING_DIR/work/out/target/product/"$DEVICE"
      - ls -lh $CIRRUS_WORKING_DIR/work/out/target/product/"$DEVICE"
      - pwd
      - chmod 777 *
        #- curl --upload-file out.tar https://transfer.sh | tee link.txt && echo " "
      - wget --method PUT --body-file=out.tar https://transfer.sh/out.tar -O - -nv | tee link.txt
      - echo " "
      - echo "============================"
      - echo "Build Uploaded!"
      - echo "Please see the link Below-  "
      - echo "----------------------------"
      - cat link.txt && echo " "
      - echo "============================"
      - fi

